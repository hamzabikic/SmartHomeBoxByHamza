#include <Arduino.h>
#include <dht11.h>
#include <ESP8266WiFi.h>
#include <Firebase_ESP_Client.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define WIFI_SSID "Bikic"
#define WIFI_PASSWORD "buhotina"

#define API_KEY "AIzaSyAAeEudINps2xztymbj4Y0sqZfdAp-DWgo"

#define DATABASE_URL "https://smarthomebyhamza-default-rtdb.europe-west1.firebasedatabase.app"
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;

#define senzorPin A0
#define buzzerPin 12 // Odgovarajući pin za D6
#define buttonPin 2 // Odgovarajući pin za D4
#define fireSensorPin 15 // Odgovarajući pin za D8

int senzor = senzorPin;
int buzzer = buzzerPin;
int button = buttonPin;
int fireSensor = fireSensorPin;
int svjetlo =0;
int AlarmCO2 =0;

WiFiClient client; // Kreiramo WiFiClient objekt
HTTPClient http;
const int httpPort = 80;

void posaljiRequest(int vrijednost, bool fire) {
    StaticJsonDocument<200> jsonDocument;
    jsonDocument["gasValue"] = vrijednost;
    jsonDocument["fireDetected"] = fire;

    // Serijalizacija JSON objekta
    String jsonString;
    serializeJson(jsonDocument, jsonString);

    http.begin(client, "http://smarthomeapi.p2347.app.fit.ba/GasFire/AddInfo"); // Koristimo begin sa WiFiClient objektom
    http.addHeader("Content-Type", "application/json");

    int httpResponseCode = http.POST(jsonString);

    if (httpResponseCode > 0) {
      Serial.print("HTTP zahtjev uspješno izvršen, kod odgovora: ");
      Serial.println(httpResponseCode);

      // Očekujemo bool vrijednost kao odgovor od servera
      bool responseBool = http.getString() == "true"; // Ako je odgovor "true", postavljamo responseBool na true, inače na false

      Serial.print("Odgovor servera (bool): ");
      Serial.println(responseBool);
      if(responseBool==false) {
        posaljiRequest(vrijednost,fire);
      }
    } else {
      Serial.print("HTTP zahtjev nije uspio, kod odgovora: ");
      Serial.println(httpResponseCode);
      posaljiRequest(vrijednost,fire);
    }
    http.end();
}
bool provjeraVeze() {
  bool vrijednostbool = true;
  http.begin(client, "http://smarthomeapi.p2347.app.fit.ba/TestirajKonekciju");
  int httpCode = http.GET();
  if (httpCode > 0) {
    if (httpCode == HTTP_CODE_OK) {
    } else {
      Serial.println("HTTP zahtjev neuspješan. Nema internet veze!");
      vrijednostbool = false;
    }
  } else {
    Serial.println("Nije moguće uspostaviti HTTP vezu. Nema internet veze!");
    vrijednostbool = false;
  }
  http.end();
  return vrijednostbool;
}
void podesavanjeFirebase() {
  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
}
bool poslano = false;
int fireVrijednost=0;

void setup() {
  Serial.begin(115200);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();
  podesavanjeFirebase();
  // Postavljanje ugra?ene LED diode kao izlaznog
  pinMode(senzor, INPUT);
  pinMode(buzzer, OUTPUT);
  pinMode(button, INPUT);
  pinMode(fireSensor,INPUT);
  Firebase.RTDB.setInt(&fbdo, "Sensors/AlarmCO2",0);
  Firebase.RTDB.setInt(&fbdo, "Sensors/FireSensor",0);
}
void loop() {
  if(WiFi.status() == WL_CONNECTED && provjeraVeze()) {
    if (!Firebase.ready()) {
      Serial.println("Prekinuta konekcija sa Firebase");
      podesavanjeFirebase();
    }
    int buttonSlanje=1;
     if(digitalRead(button) ==0) {
    noTone(buzzer);
    buttonSlanje =0;
    poslano = false;
    }
  int vrijednost = analogRead(senzor);
    if(vrijednost >500 && poslano == false) {
    tone(buzzer, 1000);
    AlarmCO2 = 1;
    buttonSlanje =1;
    Firebase.RTDB.setInt(&fbdo, "Sensors/AlarmCO2",AlarmCO2);
    posaljiRequest(vrijednost,false);
    poslano = true;
  }
    Firebase.RTDB.setInt(&fbdo, "Sensors/CO2", vrijednost);
     if(digitalRead(button) ==0) {
    noTone(buzzer);
    buttonSlanje =0;
    poslano = false;
    }
  if(digitalRead(fireSensor) == HIGH && poslano==false) {
    tone(buzzer, 1000);
    AlarmCO2 = 1;
    fireVrijednost = 1;
    buttonSlanje =1;
    Firebase.RTDB.setInt(&fbdo, "Sensors/FireSensor", fireVrijednost);
    Firebase.RTDB.setInt(&fbdo, "Sensors/AlarmCO2",AlarmCO2);
    posaljiRequest(vrijednost, true);
    poslano = true;
  }
     if(digitalRead(button) ==0) {
    noTone(buzzer);
    buttonSlanje =0;
    poslano = false;
    }
    if(Firebase.RTDB.getInt(&fbdo, "/Sensors/AlarmCO2")){
        if(fbdo.dataType() == "int"){
          AlarmCO2 = fbdo.intData();
         }
        }
  if(AlarmCO2 == 0) {
    noTone(buzzer);
    fireVrijednost =0;
    poslano = false;
    buttonSlanje =1;
  }
       if(digitalRead(button) ==0) {
    noTone(buzzer);
    buttonSlanje =0;
    poslano = false;
    }
     if(buttonSlanje == 0) {
    AlarmCO2 =0;
    fireVrijednost =0;
    Firebase.RTDB.setInt(&fbdo, "Sensors/AlarmCO2",AlarmCO2);
    Firebase.RTDB.setInt(&fbdo, "Sensors/FireSensor", fireVrijednost);
  }
}
}
