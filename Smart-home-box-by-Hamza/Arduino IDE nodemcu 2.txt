#include <Arduino.h>
#include <dht11.h>
#include <ESP8266WiFi.h>
#include <Firebase_ESP_Client.h>
#include <ESP8266HTTPClient.h>
#include <ArduinoJson.h>

#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define WIFI_SSID "Bikic"
#define WIFI_PASSWORD "buhotina"

#define API_KEY "AIzaSyAAeEudINps2xztymbj4Y0sqZfdAp-DWgo"

#define DATABASE_URL "https://smarthomebyhamza-default-rtdb.europe-west1.firebasedatabase.app"
FirebaseData fbdo;

FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
int count = 0;
bool signupOK = false;

int temperatureSensor = 14;
int RIFSensor = 2;
int buzzer2 = 12;
int AlarmPokret = 0;
int svjetlo =0;
dht11 DHT;
WiFiClient client; // Kreiramo WiFiClient objekt
HTTPClient http;
int getMinute() {
  http.begin(client, "http://smarthomeapi.p2347.app.fit.ba/getMinute");
    int minute =0;
    int httpCode = http.GET();
    if (httpCode > 0) {
      if (httpCode == HTTP_CODE_OK) {
        String payload = http.getString();
        int minute = payload.toInt(); // Pretvara string u integer
        Serial.print("Received integer: ");
        Serial.println(minute);
      }
      else {
        return getMinute();
      }
    } else {
      return getMinute();
    }

    http.end();
    return minute;
}
int poslanatemp =0;
void slanjeTemperature(int temperatura, int vlaznost) {
  int minute = getMinute();
  if(minute !=0 && minute!=30){
    poslanatemp=0;
    return;
  }
  if((minute == 0 || minute == 30) && poslanatemp ==0 ) {
    StaticJsonDocument<200> jsonDocument;
    jsonDocument["temperatura"] = temperatura;
    jsonDocument["vlaznost"] = vlaznost;

    // Serijalizacija JSON objekta
    String jsonString;
    serializeJson(jsonDocument, jsonString);

    http.begin(client, "http://smarthomeapi.p2347.app.fit.ba/TemperaturaVlaznost/addInfo"); // Koristimo begin sa WiFiClient objektom
    http.addHeader("Content-Type", "application/json");

    int httpResponseCode = http.POST(jsonString);

    if (httpResponseCode == 200) {
      bool responseBool = http.getString() == "true"; // Ako je odgovor "true", postavljamo responseBool na true, inače na false
      if(responseBool == false) {
        slanjeTemperature(temperatura, vlaznost);
      }
      else {
        poslanatemp =1;
      }
    } else {
      slanjeTemperature(temperatura, vlaznost);
    }
    http.end();
  }
}
void slanjePokreta() {
  http.begin(client, "http://smarthomeapi.p2347.app.fit.ba/SkeniraniPokreti/addPokret"); // Koristimo begin sa WiFiClient objektom
  http.addHeader("Content-Type", "application/json");

  int httpResponseCode = http.POST("{}");

    if (httpResponseCode == 200) {
      bool responseBool = http.getString() == "true"; // Ako je odgovor "true", postavljamo responseBool na true, inače na false
      if(responseBool == false) {
        slanjePokreta();
      }
    } else {
      slanjePokreta();
    }
    http.end();
}

void setup() {
  Serial.begin(115200);
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED){
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  /* Assign the api key (required) */
  config.api_key = API_KEY;

  /* Assign the RTDB URL (required) */
  config.database_url = DATABASE_URL;

  /* Sign up */
  if (Firebase.signUp(&config, &auth, "", "")){
    Serial.println("ok");
    signupOK = true;
  }
  else{
    Serial.printf("%s\n", config.signer.signupError.message.c_str());
  }

  /* Assign the callback function for the long running token generation task */
  config.token_status_callback = tokenStatusCallback; //see addons/TokenHelper.h
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  // Postavljanje ugra?ene LED diode kao izlaznog
  pinMode(buzzer2, OUTPUT);
  pinMode(RIFSensor, INPUT);
  pinMode(temperatureSensor,INPUT);
  Firebase.RTDB.setInt(&fbdo, "Sensors/SenzorPokreta",0);
  Firebase.RTDB.setInt(&fbdo, "Sensors/AlarmPokret", 0);
}
int aktivanSigurnosniSustav = 0;
int poslano = false;
void loop() {
  if(Firebase.RTDB.getInt(&fbdo, "/Sensors/AktiviranSigurnosniSustav")){
        if(fbdo.dataType() == "int"){
          aktivanSigurnosniSustav = fbdo.intData();
         }
        }
if(aktivanSigurnosniSustav == 1) {
  if(digitalRead(RIFSensor) == HIGH && poslano == false) {
    tone(buzzer2, 1000);
    Firebase.RTDB.setInt(&fbdo, "Sensors/SenzorPokreta",1);
    AlarmPokret =1;
    Firebase.RTDB.setInt(&fbdo, "Sensors/AlarmPokret",AlarmPokret);
    slanjePokreta();
    poslano = true;
  } 
  }
  DHT.read(temperatureSensor);
  Firebase.RTDB.setInt(&fbdo, "Sensors/Temperature", DHT.temperature);
  Firebase.RTDB.setInt(&fbdo, "Sensors/Humidity", DHT.humidity);
  slanjeTemperature(DHT.temperature, DHT.humidity);
  if(Firebase.RTDB.getInt(&fbdo, "/Sensors/AlarmPokret")){
        if(fbdo.dataType() == "int"){
          AlarmPokret = fbdo.intData();
         }
        }
  if(AlarmPokret ==0){
    noTone(buzzer2);
    poslano = false;
  }
}
